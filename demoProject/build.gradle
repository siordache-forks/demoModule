plugins {
	id 'application'
	id 'eclipse'
    id 'org.openjfx.javafxplugin' version '0.0.8'
    id 'org.beryx.runtime' version '1.8.6'
}

repositories {
    jcenter()
    mavenCentral()//{ metadataSources { mavenPom(); artifact() } }
	
	flatDir {
		dirs 'lib'
	}
}

// buildDir = 'c:\\demoModuleBuild'

dependencies {
//    implementation 'net.java.dev.jna:jna:5.5.0'

    testImplementation 'junit:junit:4.12'
}


java {
    sourceCompatibility = JavaVersion.VERSION_13
    targetCompatibility = JavaVersion.VERSION_13
}

javafx {
	version="13"
	modules = ['javafx.controls','javafx.base','javafx.fxml','javafx.graphics','javafx.media','javafx.swing','javafx.web']
}

application {
    mainClass = "demoProject.Launcher"
    applicationName = 'demoProject'
    applicationDefaultJvmArgs = [
    	"-Djava.library.path=$projectDir/dll",
    	'-Dsun.io.serialization.extendedDebugInfo=true', 
    	'-showversion', 
    	'-XX:+ShowMessageBoxOnError', 
    	'-XX:ErrorFile=error.log', 
    	'-Xms2g' ,'-Xmx2g', '-Xss512m', 
    	'-Duser.language=en'] 
}

run {
    args '--win9x'
}

runtime {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--ignore-signing-information']
    additive = true
    modules = ['java.management']
    
    jpackage {
    	skipInstaller = true
    	imageOptions = ['--arguments', 'zzz yyy xxx']
    	jvmArgs = application.applicationDefaultJvmArgs
        // installerOutputDir = file("releases")
        // installerOptions = ['--temp', 'releases/temp-files']
        // jpackageHome = '/usr/lib/jvm/jdk14'
    }
}


tasks.processResources {
	from "config/$customerId"
	into sourceSets.main.java.outputDir
}

tasks.jpackageImage {
	doLast {
		println "#### imageOutputDir: $jpackageData.imageOutputDir/$jpackageData.imageName"
		copy {
			from "dll"
			into "$jpackageData.imageOutputDir/$jpackageData.imageName"
		}
	}
}


/*
task me(type: GradleBuild){
    buildFile 'mybuild.gradle' //defaults to build.gradle so not needed
    dir 'someDir'
    tasks 'clean', 'build'
}
*/



/*
jlink {
	mergedModule {
        requires "java.xml"
    }
    
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages', '--ignore-signing-information']
    launcher {
        name = 'demoProject'
    }
    
    launcher {
        name = 'demoProjectLauncher'
        //'-Djava.library.path=resources\matrixlock'
        jvmArgs = ['-Dsun.io.serialization.extendedDebugInfo=true', '-showversion', '-XX:+ShowMessageBoxOnError', '-XX:ErrorFile=error.log', '-Xms2g' ,'-Xmx2g', '-Xss512m', '-Duser.language=en']
        args = ['--win9x']
    }  
}
*/

/*
task demoBuild {
	println "Demo Build"
	println new Date().format( 'yyyyMMdd' )
}

def customers = ['customer01','customer02']

task customerJ {
	customers.each  { cust -> println cust
		task "fatJar$cust" (type: Jar, description:cust, dependsOn: jar){
				println "TaskJar: "+description
	
			ext{
				customer=cust
			}
			println "Its customer: " + customer
			archiveName customer+"_"+version+".jar"
			into ('config') {
				from ("resources/config/$cust/") 
			}
		}
		tasks["fatJar$cust"].dependsOn clean
		tasks["fatJar$cust"].mustRunAfter clean
		demoBuild.dependsOn tasks["fatJar$cust"]
		}
}
*/
